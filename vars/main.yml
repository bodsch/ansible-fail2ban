---

_fail2ban_packages:
  default:
    - fail2ban
  artixlinux:
    - fail2ban-openrc

_fail2ban_before_conf:
  default: paths-debian.conf
  redhat: paths-fedora.conf
  suse: paths-opensuse.conf
  archlinux: paths-arch.conf
  artixlinux: paths-artix.conf

fail2ban_packages: "{{
          _fail2ban_packages[ansible_os_family | lower~ '-' ~ ansible_distribution_major_version] |
  default(_fail2ban_packages[ansible_os_family | lower] |
  default(_fail2ban_packages[ansible_os_family | lower | replace(' ', '') ] |
  default(_fail2ban_packages[ansible_distribution | lower~ '-' ~ ansible_distribution_major_version] |
  default(_fail2ban_packages[ansible_distribution | lower] |
  default(_fail2ban_packages['default']))))) }}"

fail2ban_before_conf: "{{
          _fail2ban_before_conf[ansible_os_family | lower | replace(' ', '') ] |
  default(_fail2ban_before_conf[ansible_os_family | lower] |
  default(_fail2ban_before_conf['default'])) }}"

fail2ban_conf_default:
  default:
    # 'CRITICAL','ERROR','WARNING','NOTICE','INFO','DEBUG'
    loglevel: INFO
    # Set the log target. This could be a file, SYSLOG, STDERR or STDOUT.
    logtarget: "/var/log/fail2ban.log"
    # Set the syslog socket file. Only used when logtarget is SYSLOG
    syslogsocket: auto
    # Set the socket file. This is used to communicate with the daemon.
    socket: /run/fail2ban/fail2ban.sock
    # Set the PID file. This is used to store the process ID of the fail2ban server.
    pidfile: /run/fail2ban/fail2ban.pid
    # Set the file for the fail2ban persistent data to be stored.
    dbfile: /var/lib/fail2ban/fail2ban.sqlite3
    # Sets age at which bans should be purged from the database
    dbpurgeage: 1d
    # Number of matches stored in database per ticket
    dbmaxmatches: 10
  definition: {}
  thread:
    stacksize: 0

fail2ban_jail_default:
  includes:
    before: "{{ fail2ban_before_conf }}"
    after: ''
  default:
    ignoreips: "{{ fail2ban_ignoreips }}"
    # "bantime" is the number of seconds that a host is banned.
    bantime: 600
    # "maxretry" is the number of failures before a host get banned.
    maxretry: 3
    # A host is banned if it has generated "maxretry" during the last "findtime" seconds.
    findtime: 3200
    # pyinotify: requires pyinotify (a file alteration monitor) to be installed.
    #              If pyinotify is not installed, Fail2ban will use auto.
    # gamin:     requires Gamin (a file alteration monitor) to be installed.
    #              If Gamin is not installed, Fail2ban will use auto.
    # polling:   uses a polling algorithm which does not require external libraries.
    # systemd:   uses systemd python library to access the systemd journal.
    #              Specifying "logpath" is not valid for this backend.
    #              See "journalmatch" in the jails associated filter config
    # auto:      will try to use the following backends, in order:
    #              pyinotify, gamin, polling.
    backend: auto

    # yes:   if a hostname is encountered, a reverse DNS lookup will be performed.
    # warn:  if a hostname is encountered, a reverse DNS lookup will be performed,
    #        but it will be logged as a warning.
    # no:    if a hostname is encountered, will not be used for banning,
    #        but it will be logged as info.
    usedns: warn

    # "logencoding" specifies the encoding of the log files handled by the jail
    #   This is used to decode the lines from the log file.
    #   Typical examples:  "ascii", "utf-8"
    #
    #   auto:   will use the system locale setting
    logencoding: auto

    # "enabled" enables the jails.
    #  By default all jails are disabled, and it should stay this way.
    #  Enable only relevant to your setup jails in your .local or jail.d/*.conf
    #
    # true:  jail will be enabled and log files will get monitored for changes
    # false: jail is not enabled
    jails_enabled: false
  actions:
    destemail: root@localhost
    sender: root@localhost
    mta: sendmail
    protocol: tcp
    chain: INPUT
    # Default banning action (e.g. iptables, iptables-new, iptables-multiport, shorewall, etc)
    banaction: iptables-multiport

fail2ban_jails_defaults:
  - name: ssh
    enabled: false
    port: ssh
    filter: sshd
    logpath: '%(auth_log)s'
  - name: ssh-breakin
    enabled: false
    port: ssh
    filter: sshd-break-in
    logpath: '%(auth_log)s'
  - name: ssh-ddos
    enabled: false
    port: ssh
    filter: sshd-ddos
    logpath: '%(auth_log)s'

#   - name: dropbear
#     enabled: false
#     port: ssh
#     logpath: '%(dropbear_log)s'
#     backend: '%(dropbear_backend)s'
#   - name: selinux-ssh
#     enabled: false
#     port: ssh
#     logpath: '%(auditd_log)s'
#   - name: apache-auth
#     port: http,https
#     logpath: '%(apache_error_log)s'
#   # Ban hosts which agent identifies spammer robots crawling the web
#   # for email addresses. The mail outputs are buffered.
#   - name: apache-badbots
#     port: http,https
#     logpath: '%(apache_access_log)s'
#     bantime: 48h
#     maxretry: 1
#
#   - name: nginx-http-auth
#     port: http,https
#     logpath: '%(nginx_error_log)s'
#
#   # To use 'nginx-limit-req' jail you should have `ngx_http_limit_req_module`
#   # and define `limit_req` and `limit_req_zone` as described in nginx documentation
#   # http://nginx.org/en/docs/http/ngx_http_limit_req_module.html
#   # or for example see in 'config/filter.d/nginx-limit-req.conf'
#   - name: nginx-limit-req
#     port: http,https
#     logpath: '%(nginx_error_log)s'
#
#   - name: nginx-botsearch
#     port: http,https
#     logpath: '%(nginx_error_log)s'
#     maxretry: 2
#
#   - name: dovecot
#     port: pop3,pop3s,imap,imaps,submission,465,sieve
#     logpath: '%(dovecot_log)s'
#     backend: '%(dovecot_backend)s'
#
#   # AKA mumble-server
#   - name: murmur
#     port: 64738
#     action_:
#       - '%(default/action_)s[name=%(__name__)s-tcp, protocol="tcp"]'
#       - '%(default/action_)s[name=%(__name__)s-udp, protocol="udp"]'
#     logpath: /var/log/mumble-server/mumble-server.log
